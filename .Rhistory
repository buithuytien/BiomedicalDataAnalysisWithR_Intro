geom_point(data = iris.summary, shape = 15, size = 5, alpha = 0.6) # alpha = transparency
g
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = c(1.5, 3.5, 6),
Petal.Width  = c(0.75,0.9, 1.5) )
g + geom_text(data = iris.lab,
mapping = aes(label = Species),
position = position_jitter(width=0.1,height=0.1),
show.legend = F)
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = c(1.5, 3.5, 6),
Petal.Width  = c(0.75,0.9, 1.5) )
g + geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = c(1.5, 3.5, 6),
Petal.Width  = c(0.7, 0.9, 1.3) )
g + geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = c(1.5, 3.5, 6),
Petal.Width  = c(0.7, 0.9, 1.3) )
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
# Inherits both data and aes from ggplot()
geom_point(position = "jitter") +
g +   geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = c(1.5, 3.5, 6),
Petal.Width  = c(0.7, 0.9, 1.3) )
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
# Inherits both data and aes from ggplot()
geom_point(position = "jitter")
g +   geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = c(1.5, 3.5, 6),
Petal.Width  = c(0.7, 0.9, 1.3) )
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
# Inherits both data and aes from ggplot()
geom_point(position = "jitter")
g +   geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
iris %>%
group_by(Species)
iris %>%
group_by(Species) %>% summarise_at(vars(Petal.Length, Petal.Width), funs(min, max))
iris %>%
group_by(Species) %>% summarise_at(vars(Petal.Length, Petal.Width), funs(max))
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = iris.summary$Petal.Length ,
Petal.Width  = c(sapply() ) )
iris.lab <- data.frame(Species = levels(iris$Species),
Petal.Length = iris.summary$Petal.Length,
Petal.Width  = c(0.7, 0.9, 1.3) )
g + geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
set.seed(1)
df_train <- iris[iris$Species == c("versicolor", "virginica"),c("Petal.Length", "Petal.Width", "Species")]
head(df_train)
library(e1071)
library(e1071)
set.seed(1)
df_train <- iris[iris$Species == c("versicolor", "virginica"),c("Petal.Length", "Petal.Width", "Species")]
svm_model<- svm(Species ~ .,
data = df_train,
type = "C-classification" ,
kernel = "linear" ,
scale = FALSE)
svm_model
svm_model$SV
library(e1071)
set.seed(1)
df_train <- iris[iris$Species == c("versicolor", "virginica"),c("Petal.Length", "Petal.Width", "Species")]
svm_model<- svm(Species ~ .,
data = df_train,
type = "C-classification" ,
kernel = "linear" ,
scale = FALSE)
w <- t(svm_model$coefs) %*% svm_model$SV
slope_1 <- -w[1]/w[2]
intercept_1 <- svm_model$rho/w[2]
g + geom_abline(slope = slope_1, intercept = intercept_1)
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = "dash")
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2)
library(e1071)
set.seed(1)
df_train <- iris[iris$Species == c("versicolor", "virginica"),c("Petal.Length", "Petal.Width", "Species")]
svm_model<- svm(Species ~ Petal.Length + Petal.Width ,
data = iris,
type = "C-classification" ,
kernel = "linear" ,
scale = FALSE)
w <- t(svm_model$coefs) %*% svm_model$SV
slope_1 <- -w[1]/w[2]
intercept_1 <- svm_model$rho/w[2]
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2)
library(e1071)
set.seed(1)
df_train <- iris[iris$Species == c("versicolor", "virginica"),c("Petal.Length", "Petal.Width", "Species")]
svm_model<- svm(Species ~ Petal.Width + Petal.Length,
data = iris,
type = "C-classification" ,
kernel = "linear" ,
scale = FALSE)
w <- t(svm_model$coefs) %*% svm_model$SV
slope_1 <- -w[1]/w[2]
intercept_1 <- svm_model$rho/w[2]
df_train <- iris %>% subset(Species == c("versicolor", "virginica") ) %>%
select(c("Petal.Length", "Petal.Width", "Species"))
df_train
library(e1071)
set.seed(1)
df_train <- iris %>% subset(Species == c("versicolor", "virginica") ) %>%
select(c("Petal.Length", "Petal.Width", "Species"))
svm_model<- svm(Species ~ .,
data = df_train,
type = "C-classification" ,
kernel = "linear" ,
scale = FALSE)
w <- t(svm_model$coefs) %*% svm_model$SV
slope_1 <- -w[1]/w[2]
intercept_1 <- svm_model$rho/w[2]
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2)
x_start = 5; y_start = 0.75
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2) + # add a SVM hyper plane
annotate("text",
x = x_start, y = y_start,
label = "Support Vector\nMachine Hyperplane",
vjust = 1, size = 3, color = "grey40")
x_start = 5; y_start = 0.75
x_end = 6 ; y_end = intercept_1 + x_end * slope_1
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2) + # add a SVM hyper plane
annotate("text",
x = x_start, y = y_start,
label = "Support Vector\nMachine Hyperplane",
vjust = 1, size = 3, color = "grey40") +
annotate("curve",
x = x_start, y = y_start,
xend = x_end, yend = y_end,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40" )
x_start = 5; y_start = 0.75
x_end = 6 ; y_end = intercept_1 + x_end * slope_1
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2) + # add a SVM hyper plane
annotate("text",
x = x_start, y = y_start,
label = "Support Vector\nMachine Hyperplane",
vjust = 1, size = 3, color = "grey40") +
annotate("curve", curvature = -1,
x = x_start, y = y_start,
xend = x_end, yend = y_end,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40" )
x_start = 5; y_start = 0.75
x_end = 6 ; y_end = intercept_1 + x_end * slope_1
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2) + # add a SVM hyper plane
annotate("text",
x = x_start, y = y_start,
label = "Support Vector\nMachine Hyperplane",
vjust = 1, size = 3, color = "grey40") +
annotate("curve", curvature = -0.1,
x = x_start, y = y_start,
xend = x_end, yend = y_end,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40" )
x_start = 5; y_start = 0.75
x_end = 5.5 ; y_end = intercept_1 + x_end * slope_1
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2) + # add a SVM hyper plane
annotate("text",
x = x_start, y = y_start,
label = "Support Vector\nMachine Hyperplane",
vjust = 1, size = 3, color = "grey40") +
annotate("curve", curvature = -0.1,
x = x_start, y = y_start,
xend = x_end, yend = y_end,
arrow = arrow(length = unit(0.2, "cm"), type = "closed"),
color = "grey40" )
x_start = 5; y_start = 0.75
x_end = 5.5; y_end = intercept_1 + x_end * slope_1
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
# Inherits both data and aes from ggplot()
geom_point(position = "jitter") +
geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2) + # add a SVM hyper plane
library(e1071)
set.seed(1)
df_train <- iris %>% subset(Species == c("versicolor", "virginica") ) %>%
select(c("Petal.Length", "Petal.Width", "Species"))
svm_model<- svm(Species ~ .,
data = df_train,
type = "C-classification" ,
kernel = "linear" ,
scale = FALSE)
# get slope and intercept for the linear hyperplane
w <- t(svm_model$coefs) %*% svm_model$SV   # calculate weight coefficients
slope_1 <- -w[1]/w[2]
intercept_1 <- svm_model$rho/w[2]
x_start = 5; y_start = 0.75
x_end = 5.5; y_end = intercept_1 + x_end * slope_1
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
# Inherits both data and aes from ggplot()
geom_point(position = "jitter") +
geom_text(data = iris.lab,
mapping = aes(label = Species),
show.legend = F)
g + geom_abline(slope = slope_1, intercept = intercept_1, linetype = 2)  # add a SVM hyper plane
levels(iris$Species)
plotIris <- function(species){
df <- iris %>% subset(Species == species)
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(position = "jitter") +
scale_x_continuous("Petal Length") +
scale_y_continuous("Petal Width") +
ggtitle(strsplit(species, "."))
return(g)
}
my_plots <- lapply(levels(iris$Species), plotIris)
length(my_plots)
plotIris <- function(species){
df <- iris %>% subset(Species == species)
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(position = "jitter") +
scale_x_continuous("Petal Length") +
scale_y_continuous("Petal Width") +
ggtitle(strsplit(species, "."))
return(g)
}
# create a list of ggplot2 objects
my_plots <- lapply(levels(iris$Species), plotIris)
length(my_plots)
my_plots[[1]]
plotIris <- function(species){
df <- iris %>% subset(Species == species)
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(position = "jitter") +
scale_x_continuous("Petal Length") +
scale_y_continuous("Petal Width") +
ggtitle(strsplit(species, split="."))
return(g)
}
# create a list of ggplot2 objects
my_plots <- lapply(levels(iris$Species), plotIris)
length(my_plots)
my_plots[[1]]
plotIris <- function(species){
df <- iris %>% subset(Species == species)
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(position = "jitter") +
scale_x_continuous("Petal Length") +
scale_y_continuous("Petal Width") +
ggtitle(species)
return(g)
}
# create a list of ggplot2 objects
my_plots <- lapply(levels(iris$Species), plotIris)
length(my_plots)
my_plots[[1]]
names(my_plots)
library(gridExtra)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow=2)
library(gridExtra)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow=2)
library(gridExtra)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow=2)
library(gridExtra)
do.call(grid.arrange, my_plots, nrow=2)
library(gridExtra)
do.call(grid.arrange, c(my_plots, nrow=2))
library(gridExtra)
do.call(what = grid.arrange, args = c(my_plots, nrow=2))
ggpubr::ggarrange(my_plots, nrow = 2)
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow=2)
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]], nrow=2, ncol=2)
do.call(what = ggpubr::ggarrange, args = c(my_plots, nrow=2, ncol=2))
library(gridExtra)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "left",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
do.call(what = ggpubr::ggarrange, args = c(my_plots, nrow=2, ncol=2))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=2, ncol=2,
common.legend = TRUE, legend = "top",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
library(gridExtra)
do.call(what = grid.arrange, args = c(my_plots, nrow=2, ncol=2))
library(gridExtra)
do.call(what = grid.arrange, args = c(my_plots, nrow=1, ncol=3))
library(gridExtra)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3 )
plotIris <- function(species){
df <- iris %>% subset(Species == species)
g <- ggplot(iris, aes(x = Petal.Length, y = Petal.Width, col = Species)) +
geom_point(position = "jitter") +
scale_x_continuous("Petal Length") +
scale_y_continuous("Petal Width") +
ggtitle(species) +
theme_classic()
return(g)
}
# create a list of ggplot2 objects
my_plots <- lapply(levels(iris$Species), plotIris)
length(my_plots)
my_plots[[1]]
library(gridExtra)
grid.arrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3 )
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = iris_combine.png, dpi=1200, width=12, height=3, units=("inch"))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = iris_combine.png, plot=p, dpi=1200, width=12, height=3, units=("inch"))
ggsave(filename = "iris_combine.png", plot=p, dpi=1200, width=12, height=3, units=("inch"))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = "iris_combine.png", plot=p, dpi=1200, width=12, height=3, units=("cm"))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
labels=c("A","B","C")))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = "iris_combine.pdf", plot=p, dpi=1200, width=12, height=3, units=("cm"))
p
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = "iris_combine.png", plot=p[[2]], dpi=1200, width=12, height=3, units=("cm"))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = "iris_combine.png", plot=p[[1]], dpi=1200, width=12, height=3, units=("cm"))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = "iris_combine.png", plot=p[[1]], dpi=1200, width=12, height=3, units=("in"))
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
ggsave(filename = "iris_combine.png", plot=p[[1]], dpi=1200, width=9, height=3, units=("in"))
p <- ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
p[[1]]
p[[2]]
p
p <- ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
p
p
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p
p <- do.call(what = ggpubr::ggarrange,
args = c(my_plots, nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C")))
p[[1]]
p[[1]]
p
p <- ggpubr::ggarrange(my_plots[[1]], my_plots[[2]], my_plots[[3]],
nrow=1, ncol=3,
common.legend = TRUE, legend = "bottom",
labels=c("A","B","C"))
p
ggsave(filename = "iris_combine.png",
plot=p,
dpi=1200,
width=9, height=3, units=("in"))
p
p
ggsave(filename = "iris_combine.png",
plot=p,
dpi=1200,
width=9, height=3, units=("in"))
p
# save to file
ggsave(filename = "iris_combine.png",
plot=p,
dpi=300,
width=9, height=3, units=("in"))
p
# save to file
ggsave(filename = "iris_combine.png",
plot=p,
dpi=300,
width=9, height=3, units=("cm"))
p
# save to file
ggsave(filename = "iris_combine.png",
plot=p,
dpi=300,
width=9, height=3, units=("in"))
p
# save to file
ggsave(filename = "iris_combine.png",
plot=p,
dpi=800,
width=9, height=3, units=("in"))
